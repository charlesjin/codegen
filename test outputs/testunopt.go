// This code was automatically generated by the Crypto CodeGen Haskell utility

// the simplest case - unused is... unused.
func prune1() {
  unused := 5
}

// two steps to find the fixed point.
func prune2() {
  unused1 := 5
  unused2 := unused1
}

// because unused2 is passed in as a parameter, it might have side-effects
// syntactically dumb but the behavior is what I want
func prune3(unused2 *int) {
  unused1 := 5
  unused2 := unused1
}

// all the v1's should be grouped together
// compare feSquare in fegenopt.go and fegenunopt.go for a more complicated
// demonstration
func schedule1() {
  o1 := v1 * v2
  o2 := v2 * v3
  o3 := v1 * v3
  o4 := v4 * v4
  o5 := v1 * v4
  o5 := v1 * v1
}
